variable "project_name" {
    description = "The name of the GCP project"
    default     = "my-gcp-project"
}

resource "google_compute_instance" "vm_instance" {
    name         = "terraform-instance"
    machine_type = "e2-medium"
    zone         = "us-central1-a"

    boot_disk {
        initialize_params {
            size = 50
        }
    }
}

variable "deploy_instance" {
    description = "Should the instance be deployed"
    default     = true
}

resource "google_compute_instance" "vm_instance" {
    count = var.deploy_instance ? 1 : 0
}

variable "availability_zones" {
    description = "The availability zones"
    default     = ["us-central1-a", "us-central1-b", "us-central1-c"]
}

resource "google_compute_instance" "vm_instance" {
    count        = length(var.availability_zones)
    name         = "instance-${count.index}"
    machine_type = "e2-medium"
    zone         = var.availability_zones[count.index]
}

variable "vm_count" {
    description = "The number of VM instances"
    type        = number
    default     = 4
}

variable "disk_size_per_vm" {
    description = "The disk size allocated for each VM instance in GB"
    type        = number
    default     = 10
}

resource "google_compute_disk" "example_disk" {
    name  = "managed-disk"
    size  = var.vm_count * var.disk_size_per_vm
    type  = "pd-standard"
    zone  = "us-central1-a"
}

variable "large_instance_threshold" {
    description = "The CPU threshold for defining a large instance"
    type        = number
    default     = 4
}

variable "cpu_count" {
    description = "The number of CPUs for the instance"
    type        = number
}

resource "google_compute_instance" "vm_instance" {
    name         = "instance-${var.cpu_count >= var.large_instance_threshold ? 'large' : 'small'}"
    machine_type = var.cpu_count >= var.large_instance_threshold ? "n1-standard-8" : "n1-standard-1"
    zone         = "us-central1-a"
}

variable "is_production" {
    description = "Flag to indicate production environment"
    type        = bool
}

variable "deploy_services" {
    description = "Flag to indicate if services should be deployed"
    type        = bool
}

variable "instance_count" {
    description = "Number of instances to deploy when conditions are met"
    type        = number
    default     = 1
}

resource "google_compute_instance" "vm_instance" {
    count = var.is_production && var.deploy_services ? var.instance_count : 0
}

variable "deploy_east_coast" {
    description = "Flag for deploying resources in the East Coast region"
    type        = bool
}

variable "deploy_west_coast" {
    description = "Flag for deploying resources in the West Coast region"
    type        = bool
}

variable "instance_count" {
    description = "Number of instances to deploy when conditions are met"
    type        = number
    default     = 1
}

resource "google_compute_instance" "vm_instance" {
    count = var.deploy_east_coast || var.deploy_west_coast ? var.instance_count : 0
}

variable "prevent_deployment" {
    description = "Flag to prevent any deployments"
    type        = bool
    default     = false
}

resource "google_compute_instance" "vm_instance" {
    count = !var.prevent_deployment ? 1 : 0
}

variable "maintenance_mode" {
    description = "Flag to indicate if the system is in maintenance mode"
    type        = bool
}

resource "google_compute_instance" "vm_instance" {
    count = var.is_production && var.deploy_services && !var.maintenance_mode ? var.instance_count : 0
}

variable "availability_zones" {
    description = "List of availability zones"
    type        = list(string)
    default     = ["us-west1-a", "us-west1-b", "us-west1-c"]
}

resource "google_compute_instance" "vm_instance" {
    count = length(var.availability_zones)
    name = "vm-instance-${count.index}"
    zone = var.availability_zones[count.index]
}

resource "google_compute_instance" "vm_instance" {
    count = 5
    name = "vm-instance-${count.index}"
    zone = element(var.availability_zones, count.index)
}

variable "region_to_zones" {
    description = "Mapping of regions to availability zones"
    type        = map(list(string))
    default     = {
        "us-west" = ["us-west1-a", "us-west1-b"]
        "us-east" = ["us-east1-a", "us-east1-b"]
    }
}

variable "region" {
    description = "The region to deploy instances in"
    type        = string
    default     = "us-west"
}

resource "google_compute_instance" "vm_instance" {
    zone = lookup(var.region_to_zones, var.region, "us-west1-a")
}

variable "first_zone_group" {
    default = ["us-west1-a", "us-west1-b"]
}

variable "second_zone_group" {
    default = ["us-west1-c", "us-west1-d"]
}

output "all_zones" {
    value = concat(var.first_zone_group, var.second_zone_group)
}

variable "instance_name" {
    default = "web"
}

resource "google_compute_instance" "vm_instance" {
    name = "${var.instance_name}-${formatdate('YYYYMMDD', timestamp())}"
}

variable "enable_logging" {
    default = true
}

output "logging_status" {
    value = "Logging is ${var.enable_logging ? "enabled" : "disabled"}."
}

variable "users" {
    default = ["alice", "bob", "charlie"]
}

output "user_directories" {
    value = [for user in var.users : "/home/${user}"]
}

variable "deploy_environment" {
    description = "The environment to which resources will be deployed"
    type        = string
    default     = "development"
}

resource "google_compute_instance" "vm_instance" {
    name         = "vm-${var.deploy_environment}"
    machine_type = var.deploy_environment == "production" ? "n1-standard-2" : "n1-standard-1"
    tags         = var.deploy_environment == "production" ? ["production"] : ["development"]
}

variable "instances" {
    description = "Map of instances with deployment flags"
    type = map(object({
        name   = string
        deploy = bool
    }))
    default = {
        "instance1" = { name = "alpha", deploy = true }
        "instance2" = { name = "beta",  deploy = false }
        "instance3" = { name = "gamma", deploy = true }
    }
}

output "deployable_instances" {
    description = "List of instance names to be deployed"
    value       = [for key, instance in var.instances : instance.name if instance.deploy]
}

variable "environment" {
    description = "The deployment environment"
    type        = string
    default     = "development"
}

locals {
    bucket_name = var.environment == "production" ? "tf-example-bucket-prod" : "tf-example-bucket-dev"
}

resource "google_storage_bucket" "example-bucket" {
    name          = local.bucket_name
    location      = "ASIA1"
    force_destroy = true
}

variable "tags" {
    description = "List of tags for the resources"
    type        = list(string)
    default     = ["first", "second"]
}

locals {
    common_tags = concat(var.tags, ["managed-by-terraform"])
}

output "bucket_names" {
    description = "Names of example buckets"
    value       = [for bucket in google_storage_bucket.example-bucket : bucket.name]
}

variable "bucket_cors" {
    description = "Map of bucket identifiers to their CORS configuration"
    type = map(object({
        origin          = list(string)
        method          = list(string)
        response_header = optional(list(string))
        max_age_seconds = optional(number)
    }))
    default = {
        "1" = {
            origin = ["http://example.com"]
            method = ["GET", "HEAD", "PUT"]
        }
        "2" = null
    }
}

resource "google_storage_bucket" "example-bucket" {
    for_each      = var.bucket_cors
    name          = "${local.bucket_name}-${each.key}"
    location      = "ASIA1"
    force_destroy = true

    dynamic "cors" {
        for_each = each.value != null ? [each.value] : []
        content {
            origin          = cors.value.origin
            method          = cors.value.method
            response_header = try(cors.value.response_header, null)
            max_age_seconds = try(cors.value.max_age_seconds, null)
        }
    }
}

locals {
    instances = {
        "instance1" = { name = "alpha", type = "t2.micro" }
        "instance2" = { name = "beta", type = "t2.medium" }
        "instance3" = { name = "gamma", type = "t2.large" }
    }

    instance_types = { 
        for key, instance in local.instances :
        key => instance.type 
    }
}

